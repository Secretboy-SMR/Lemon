// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: SceneGadgetInfo.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Lemonade.Net.Protocol {

  /// <summary>Holder for reflection information generated from SceneGadgetInfo.proto</summary>
  public static partial class SceneGadgetInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for SceneGadgetInfo.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SceneGadgetInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVTY2VuZUdhZGdldEluZm8ucHJvdG8aCkl0ZW0ucHJvdG8aFkdhdGhlckdh",
            "ZGdldEluZm8ucHJvdG8aEVdvcmt0b3BJbmZvLnByb3RvGhZDbGllbnRHYWRn",
            "ZXRJbmZvLnByb3RvGhFXZWF0aGVySW5mby5wcm90bxoXQWJpbGl0eUdhZGdl",
            "dEluZm8ucHJvdG8aFlN0YXR1ZUdhZGdldEluZm8ucHJvdG8aE0Jvc3NDaGVz",
            "dEluZm8ucHJvdG8aFkJsb3Nzb21DaGVzdEluZm8ucHJvdG8aFk1wUGxheVJl",
            "d2FyZEluZm8ucHJvdG8aHUdhZGdldEdlbmVyYWxSZXdhcmRJbmZvLnByb3Rv",
            "GhJPZmZlcmluZ0luZm8ucHJvdG8aFEZvdW5kYXRpb25JbmZvLnByb3RvGhFW",
            "ZWhpY2xlSW5mby5wcm90bxoTRWNob1NoZWxsSW5mby5wcm90bxoQU2NyZWVu",
            "SW5mby5wcm90bxoSRmlzaFBvb2xJbmZvLnByb3RvGhpDdXN0b21HYWRnZXRU",
            "cmVlSW5mby5wcm90bxoZUm9ndWVsaWtlR2FkZ2V0SW5mby5wcm90bxoUR2Fk",
            "Z2V0Qm9yblR5cGUucHJvdG8aElBsYXRmb3JtSW5mby5wcm90bxoUR2FkZ2V0",
            "UGxheUluZm8ucHJvdG8igwoKD1NjZW5lR2FkZ2V0SW5mbxIcCgt0cmlmbGVf",
            "aXRlbRgMIAEoCzIFLkl0ZW1IABIqCg1nYXRoZXJfZ2FkZ2V0GA0gASgLMhEu",
            "R2F0aGVyR2FkZ2V0SW5mb0gAEh8KB3dvcmt0b3AYDiABKAsyDC5Xb3JrdG9w",
            "SW5mb0gAEioKDWNsaWVudF9nYWRnZXQYDyABKAsyES5DbGllbnRHYWRnZXRJ",
            "bmZvSAASHwoHd2VhdGhlchgRIAEoCzIMLldlYXRoZXJJbmZvSAASLAoOYWJp",
            "bGl0eV9nYWRnZXQYEiABKAsyEi5BYmlsaXR5R2FkZ2V0SW5mb0gAEioKDXN0",
            "YXR1ZV9nYWRnZXQYEyABKAsyES5TdGF0dWVHYWRnZXRJbmZvSAASJAoKYm9z",
            "c19jaGVzdBgUIAEoCzIOLkJvc3NDaGVzdEluZm9IABIqCg1ibG9zc29tX2No",
            "ZXN0GCkgASgLMhEuQmxvc3NvbUNoZXN0SW5mb0gAEisKDm1wX3BsYXlfcmV3",
            "YXJkGCogASgLMhEuTXBQbGF5UmV3YXJkSW5mb0gAEjIKDmdlbmVyYWxfcmV3",
            "YXJkGCsgASgLMhguR2FkZ2V0R2VuZXJhbFJld2FyZEluZm9IABImCg1vZmZl",
            "cmluZ19pbmZvGCwgASgLMg0uT2ZmZXJpbmdJbmZvSAASKgoPZm91bmRhdGlv",
            "bl9pbmZvGC0gASgLMg8uRm91bmRhdGlvbkluZm9IABIkCgx2ZWhpY2xlX2lu",
            "Zm8YLiABKAsyDC5WZWhpY2xlSW5mb0gAEiQKCnNoZWxsX2luZm8YLyABKAsy",
            "Di5FY2hvU2hlbGxJbmZvSAASIgoLc2NyZWVuX2luZm8YMCABKAsyCy5TY3Jl",
            "ZW5JbmZvSAASJwoOZmlzaF9wb29sX2luZm8YOyABKAsyDS5GaXNoUG9vbElu",
            "Zm9IABI4ChdjdXN0b21fZ2FkZ2V0X3RyZWVfaW5mbxg8IAEoCzIVLkN1c3Rv",
            "bUdhZGdldFRyZWVJbmZvSAASNQoVcm9ndWVsaWtlX2dhZGdldF9pbmZvGD0g",
            "ASgLMhQuUm9ndWVsaWtlR2FkZ2V0SW5mb0gAEhEKCWdhZGdldF9pZBgBIAEo",
            "DRIQCghncm91cF9pZBgCIAEoDRIRCgljb25maWdfaWQYAyABKA0SFwoPb3du",
            "ZXJfZW50aXR5X2lkGAQgASgNEiIKCWJvcm5fdHlwZRgFIAEoDjIPLkdhZGdl",
            "dEJvcm5UeXBlEhQKDGdhZGdldF9zdGF0ZRgGIAEoDRITCgtnYWRnZXRfdHlw",
            "ZRgHIAEoDRIYChBpc19zaG93X2N1dHNjZW5lGAggASgIEhkKEWF1dGhvcml0",
            "eV9wZWVyX2lkGAkgASgNEhoKEmlzX2VuYWJsZV9pbnRlcmFjdBgKIAEoCBIT",
            "CgtpbnRlcmFjdF9pZBgLIAEoDRIRCgltYXJrX2ZsYWcYFSABKA0SHAoUcHJv",
            "cF9vd25lcl9lbnRpdHlfaWQYFiABKA0SHwoIcGxhdGZvcm0YFyABKAsyDS5Q",
            "bGF0Zm9ybUluZm8SGQoRaW50ZXJhY3RfdWlkX2xpc3QYGCADKA0SEAoIZHJh",
            "ZnRfaWQYGSABKA0SGQoRZ2FkZ2V0X3RhbGtfc3RhdGUYGiABKA0SIgoJcGxh",
            "eV9pbmZvGGQgASgLMg8uR2FkZ2V0UGxheUluZm9CCQoHQ29udGVudEIYqgIV",
            "TGVtb25hZGUuTmV0LlByb3RvY29sYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Lemonade.Net.Protocol.ItemReflection.Descriptor, global::Lemonade.Net.Protocol.GatherGadgetInfoReflection.Descriptor, global::Lemonade.Net.Protocol.WorktopInfoReflection.Descriptor, global::Lemonade.Net.Protocol.ClientGadgetInfoReflection.Descriptor, global::Lemonade.Net.Protocol.WeatherInfoReflection.Descriptor, global::Lemonade.Net.Protocol.AbilityGadgetInfoReflection.Descriptor, global::Lemonade.Net.Protocol.StatueGadgetInfoReflection.Descriptor, global::Lemonade.Net.Protocol.BossChestInfoReflection.Descriptor, global::Lemonade.Net.Protocol.BlossomChestInfoReflection.Descriptor, global::Lemonade.Net.Protocol.MpPlayRewardInfoReflection.Descriptor, global::Lemonade.Net.Protocol.GadgetGeneralRewardInfoReflection.Descriptor, global::Lemonade.Net.Protocol.OfferingInfoReflection.Descriptor, global::Lemonade.Net.Protocol.FoundationInfoReflection.Descriptor, global::Lemonade.Net.Protocol.VehicleInfoReflection.Descriptor, global::Lemonade.Net.Protocol.EchoShellInfoReflection.Descriptor, global::Lemonade.Net.Protocol.ScreenInfoReflection.Descriptor, global::Lemonade.Net.Protocol.FishPoolInfoReflection.Descriptor, global::Lemonade.Net.Protocol.CustomGadgetTreeInfoReflection.Descriptor, global::Lemonade.Net.Protocol.RoguelikeGadgetInfoReflection.Descriptor, global::Lemonade.Net.Protocol.GadgetBornTypeReflection.Descriptor, global::Lemonade.Net.Protocol.PlatformInfoReflection.Descriptor, global::Lemonade.Net.Protocol.GadgetPlayInfoReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Lemonade.Net.Protocol.SceneGadgetInfo), global::Lemonade.Net.Protocol.SceneGadgetInfo.Parser, new[]{ "TrifleItem", "GatherGadget", "Worktop", "ClientGadget", "Weather", "AbilityGadget", "StatueGadget", "BossChest", "BlossomChest", "MpPlayReward", "GeneralReward", "OfferingInfo", "FoundationInfo", "VehicleInfo", "ShellInfo", "ScreenInfo", "FishPoolInfo", "CustomGadgetTreeInfo", "RoguelikeGadgetInfo", "GadgetId", "GroupId", "ConfigId", "OwnerEntityId", "BornType", "GadgetState", "GadgetType", "IsShowCutscene", "AuthorityPeerId", "IsEnableInteract", "InteractId", "MarkFlag", "PropOwnerEntityId", "Platform", "InteractUidList", "DraftId", "GadgetTalkState", "PlayInfo" }, new[]{ "Content" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SceneGadgetInfo : pb::IMessage<SceneGadgetInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SceneGadgetInfo> _parser = new pb::MessageParser<SceneGadgetInfo>(() => new SceneGadgetInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SceneGadgetInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Lemonade.Net.Protocol.SceneGadgetInfoReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SceneGadgetInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SceneGadgetInfo(SceneGadgetInfo other) : this() {
      gadgetId_ = other.gadgetId_;
      groupId_ = other.groupId_;
      configId_ = other.configId_;
      ownerEntityId_ = other.ownerEntityId_;
      bornType_ = other.bornType_;
      gadgetState_ = other.gadgetState_;
      gadgetType_ = other.gadgetType_;
      isShowCutscene_ = other.isShowCutscene_;
      authorityPeerId_ = other.authorityPeerId_;
      isEnableInteract_ = other.isEnableInteract_;
      interactId_ = other.interactId_;
      markFlag_ = other.markFlag_;
      propOwnerEntityId_ = other.propOwnerEntityId_;
      platform_ = other.platform_ != null ? other.platform_.Clone() : null;
      interactUidList_ = other.interactUidList_.Clone();
      draftId_ = other.draftId_;
      gadgetTalkState_ = other.gadgetTalkState_;
      playInfo_ = other.playInfo_ != null ? other.playInfo_.Clone() : null;
      switch (other.ContentCase) {
        case ContentOneofCase.TrifleItem:
          TrifleItem = other.TrifleItem.Clone();
          break;
        case ContentOneofCase.GatherGadget:
          GatherGadget = other.GatherGadget.Clone();
          break;
        case ContentOneofCase.Worktop:
          Worktop = other.Worktop.Clone();
          break;
        case ContentOneofCase.ClientGadget:
          ClientGadget = other.ClientGadget.Clone();
          break;
        case ContentOneofCase.Weather:
          Weather = other.Weather.Clone();
          break;
        case ContentOneofCase.AbilityGadget:
          AbilityGadget = other.AbilityGadget.Clone();
          break;
        case ContentOneofCase.StatueGadget:
          StatueGadget = other.StatueGadget.Clone();
          break;
        case ContentOneofCase.BossChest:
          BossChest = other.BossChest.Clone();
          break;
        case ContentOneofCase.BlossomChest:
          BlossomChest = other.BlossomChest.Clone();
          break;
        case ContentOneofCase.MpPlayReward:
          MpPlayReward = other.MpPlayReward.Clone();
          break;
        case ContentOneofCase.GeneralReward:
          GeneralReward = other.GeneralReward.Clone();
          break;
        case ContentOneofCase.OfferingInfo:
          OfferingInfo = other.OfferingInfo.Clone();
          break;
        case ContentOneofCase.FoundationInfo:
          FoundationInfo = other.FoundationInfo.Clone();
          break;
        case ContentOneofCase.VehicleInfo:
          VehicleInfo = other.VehicleInfo.Clone();
          break;
        case ContentOneofCase.ShellInfo:
          ShellInfo = other.ShellInfo.Clone();
          break;
        case ContentOneofCase.ScreenInfo:
          ScreenInfo = other.ScreenInfo.Clone();
          break;
        case ContentOneofCase.FishPoolInfo:
          FishPoolInfo = other.FishPoolInfo.Clone();
          break;
        case ContentOneofCase.CustomGadgetTreeInfo:
          CustomGadgetTreeInfo = other.CustomGadgetTreeInfo.Clone();
          break;
        case ContentOneofCase.RoguelikeGadgetInfo:
          RoguelikeGadgetInfo = other.RoguelikeGadgetInfo.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SceneGadgetInfo Clone() {
      return new SceneGadgetInfo(this);
    }

    /// <summary>Field number for the "trifle_item" field.</summary>
    public const int TrifleItemFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.Item TrifleItem {
      get { return contentCase_ == ContentOneofCase.TrifleItem ? (global::Lemonade.Net.Protocol.Item) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.TrifleItem;
      }
    }

    /// <summary>Field number for the "gather_gadget" field.</summary>
    public const int GatherGadgetFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.GatherGadgetInfo GatherGadget {
      get { return contentCase_ == ContentOneofCase.GatherGadget ? (global::Lemonade.Net.Protocol.GatherGadgetInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.GatherGadget;
      }
    }

    /// <summary>Field number for the "worktop" field.</summary>
    public const int WorktopFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.WorktopInfo Worktop {
      get { return contentCase_ == ContentOneofCase.Worktop ? (global::Lemonade.Net.Protocol.WorktopInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Worktop;
      }
    }

    /// <summary>Field number for the "client_gadget" field.</summary>
    public const int ClientGadgetFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.ClientGadgetInfo ClientGadget {
      get { return contentCase_ == ContentOneofCase.ClientGadget ? (global::Lemonade.Net.Protocol.ClientGadgetInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.ClientGadget;
      }
    }

    /// <summary>Field number for the "weather" field.</summary>
    public const int WeatherFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.WeatherInfo Weather {
      get { return contentCase_ == ContentOneofCase.Weather ? (global::Lemonade.Net.Protocol.WeatherInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Weather;
      }
    }

    /// <summary>Field number for the "ability_gadget" field.</summary>
    public const int AbilityGadgetFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.AbilityGadgetInfo AbilityGadget {
      get { return contentCase_ == ContentOneofCase.AbilityGadget ? (global::Lemonade.Net.Protocol.AbilityGadgetInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.AbilityGadget;
      }
    }

    /// <summary>Field number for the "statue_gadget" field.</summary>
    public const int StatueGadgetFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.StatueGadgetInfo StatueGadget {
      get { return contentCase_ == ContentOneofCase.StatueGadget ? (global::Lemonade.Net.Protocol.StatueGadgetInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.StatueGadget;
      }
    }

    /// <summary>Field number for the "boss_chest" field.</summary>
    public const int BossChestFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.BossChestInfo BossChest {
      get { return contentCase_ == ContentOneofCase.BossChest ? (global::Lemonade.Net.Protocol.BossChestInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.BossChest;
      }
    }

    /// <summary>Field number for the "blossom_chest" field.</summary>
    public const int BlossomChestFieldNumber = 41;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.BlossomChestInfo BlossomChest {
      get { return contentCase_ == ContentOneofCase.BlossomChest ? (global::Lemonade.Net.Protocol.BlossomChestInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.BlossomChest;
      }
    }

    /// <summary>Field number for the "mp_play_reward" field.</summary>
    public const int MpPlayRewardFieldNumber = 42;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.MpPlayRewardInfo MpPlayReward {
      get { return contentCase_ == ContentOneofCase.MpPlayReward ? (global::Lemonade.Net.Protocol.MpPlayRewardInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.MpPlayReward;
      }
    }

    /// <summary>Field number for the "general_reward" field.</summary>
    public const int GeneralRewardFieldNumber = 43;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.GadgetGeneralRewardInfo GeneralReward {
      get { return contentCase_ == ContentOneofCase.GeneralReward ? (global::Lemonade.Net.Protocol.GadgetGeneralRewardInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.GeneralReward;
      }
    }

    /// <summary>Field number for the "offering_info" field.</summary>
    public const int OfferingInfoFieldNumber = 44;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.OfferingInfo OfferingInfo {
      get { return contentCase_ == ContentOneofCase.OfferingInfo ? (global::Lemonade.Net.Protocol.OfferingInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.OfferingInfo;
      }
    }

    /// <summary>Field number for the "foundation_info" field.</summary>
    public const int FoundationInfoFieldNumber = 45;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.FoundationInfo FoundationInfo {
      get { return contentCase_ == ContentOneofCase.FoundationInfo ? (global::Lemonade.Net.Protocol.FoundationInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.FoundationInfo;
      }
    }

    /// <summary>Field number for the "vehicle_info" field.</summary>
    public const int VehicleInfoFieldNumber = 46;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.VehicleInfo VehicleInfo {
      get { return contentCase_ == ContentOneofCase.VehicleInfo ? (global::Lemonade.Net.Protocol.VehicleInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.VehicleInfo;
      }
    }

    /// <summary>Field number for the "shell_info" field.</summary>
    public const int ShellInfoFieldNumber = 47;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.EchoShellInfo ShellInfo {
      get { return contentCase_ == ContentOneofCase.ShellInfo ? (global::Lemonade.Net.Protocol.EchoShellInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.ShellInfo;
      }
    }

    /// <summary>Field number for the "screen_info" field.</summary>
    public const int ScreenInfoFieldNumber = 48;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.ScreenInfo ScreenInfo {
      get { return contentCase_ == ContentOneofCase.ScreenInfo ? (global::Lemonade.Net.Protocol.ScreenInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.ScreenInfo;
      }
    }

    /// <summary>Field number for the "fish_pool_info" field.</summary>
    public const int FishPoolInfoFieldNumber = 59;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.FishPoolInfo FishPoolInfo {
      get { return contentCase_ == ContentOneofCase.FishPoolInfo ? (global::Lemonade.Net.Protocol.FishPoolInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.FishPoolInfo;
      }
    }

    /// <summary>Field number for the "custom_gadget_tree_info" field.</summary>
    public const int CustomGadgetTreeInfoFieldNumber = 60;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.CustomGadgetTreeInfo CustomGadgetTreeInfo {
      get { return contentCase_ == ContentOneofCase.CustomGadgetTreeInfo ? (global::Lemonade.Net.Protocol.CustomGadgetTreeInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.CustomGadgetTreeInfo;
      }
    }

    /// <summary>Field number for the "roguelike_gadget_info" field.</summary>
    public const int RoguelikeGadgetInfoFieldNumber = 61;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.RoguelikeGadgetInfo RoguelikeGadgetInfo {
      get { return contentCase_ == ContentOneofCase.RoguelikeGadgetInfo ? (global::Lemonade.Net.Protocol.RoguelikeGadgetInfo) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.RoguelikeGadgetInfo;
      }
    }

    /// <summary>Field number for the "gadget_id" field.</summary>
    public const int GadgetIdFieldNumber = 1;
    private uint gadgetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GadgetId {
      get { return gadgetId_; }
      set {
        gadgetId_ = value;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private uint groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "config_id" field.</summary>
    public const int ConfigIdFieldNumber = 3;
    private uint configId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    /// <summary>Field number for the "owner_entity_id" field.</summary>
    public const int OwnerEntityIdFieldNumber = 4;
    private uint ownerEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint OwnerEntityId {
      get { return ownerEntityId_; }
      set {
        ownerEntityId_ = value;
      }
    }

    /// <summary>Field number for the "born_type" field.</summary>
    public const int BornTypeFieldNumber = 5;
    private global::Lemonade.Net.Protocol.GadgetBornType bornType_ = global::Lemonade.Net.Protocol.GadgetBornType.GadgetBornNone;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.GadgetBornType BornType {
      get { return bornType_; }
      set {
        bornType_ = value;
      }
    }

    /// <summary>Field number for the "gadget_state" field.</summary>
    public const int GadgetStateFieldNumber = 6;
    private uint gadgetState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GadgetState {
      get { return gadgetState_; }
      set {
        gadgetState_ = value;
      }
    }

    /// <summary>Field number for the "gadget_type" field.</summary>
    public const int GadgetTypeFieldNumber = 7;
    private uint gadgetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GadgetType {
      get { return gadgetType_; }
      set {
        gadgetType_ = value;
      }
    }

    /// <summary>Field number for the "is_show_cutscene" field.</summary>
    public const int IsShowCutsceneFieldNumber = 8;
    private bool isShowCutscene_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsShowCutscene {
      get { return isShowCutscene_; }
      set {
        isShowCutscene_ = value;
      }
    }

    /// <summary>Field number for the "authority_peer_id" field.</summary>
    public const int AuthorityPeerIdFieldNumber = 9;
    private uint authorityPeerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint AuthorityPeerId {
      get { return authorityPeerId_; }
      set {
        authorityPeerId_ = value;
      }
    }

    /// <summary>Field number for the "is_enable_interact" field.</summary>
    public const int IsEnableInteractFieldNumber = 10;
    private bool isEnableInteract_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEnableInteract {
      get { return isEnableInteract_; }
      set {
        isEnableInteract_ = value;
      }
    }

    /// <summary>Field number for the "interact_id" field.</summary>
    public const int InteractIdFieldNumber = 11;
    private uint interactId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint InteractId {
      get { return interactId_; }
      set {
        interactId_ = value;
      }
    }

    /// <summary>Field number for the "mark_flag" field.</summary>
    public const int MarkFlagFieldNumber = 21;
    private uint markFlag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MarkFlag {
      get { return markFlag_; }
      set {
        markFlag_ = value;
      }
    }

    /// <summary>Field number for the "prop_owner_entity_id" field.</summary>
    public const int PropOwnerEntityIdFieldNumber = 22;
    private uint propOwnerEntityId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PropOwnerEntityId {
      get { return propOwnerEntityId_; }
      set {
        propOwnerEntityId_ = value;
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 23;
    private global::Lemonade.Net.Protocol.PlatformInfo platform_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.PlatformInfo Platform {
      get { return platform_; }
      set {
        platform_ = value;
      }
    }

    /// <summary>Field number for the "interact_uid_list" field.</summary>
    public const int InteractUidListFieldNumber = 24;
    private static readonly pb::FieldCodec<uint> _repeated_interactUidList_codec
        = pb::FieldCodec.ForUInt32(194);
    private readonly pbc::RepeatedField<uint> interactUidList_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> InteractUidList {
      get { return interactUidList_; }
    }

    /// <summary>Field number for the "draft_id" field.</summary>
    public const int DraftIdFieldNumber = 25;
    private uint draftId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DraftId {
      get { return draftId_; }
      set {
        draftId_ = value;
      }
    }

    /// <summary>Field number for the "gadget_talk_state" field.</summary>
    public const int GadgetTalkStateFieldNumber = 26;
    private uint gadgetTalkState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GadgetTalkState {
      get { return gadgetTalkState_; }
      set {
        gadgetTalkState_ = value;
      }
    }

    /// <summary>Field number for the "play_info" field.</summary>
    public const int PlayInfoFieldNumber = 100;
    private global::Lemonade.Net.Protocol.GadgetPlayInfo playInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Lemonade.Net.Protocol.GadgetPlayInfo PlayInfo {
      get { return playInfo_; }
      set {
        playInfo_ = value;
      }
    }

    private object content_;
    /// <summary>Enum of possible cases for the "Content" oneof.</summary>
    public enum ContentOneofCase {
      None = 0,
      TrifleItem = 12,
      GatherGadget = 13,
      Worktop = 14,
      ClientGadget = 15,
      Weather = 17,
      AbilityGadget = 18,
      StatueGadget = 19,
      BossChest = 20,
      BlossomChest = 41,
      MpPlayReward = 42,
      GeneralReward = 43,
      OfferingInfo = 44,
      FoundationInfo = 45,
      VehicleInfo = 46,
      ShellInfo = 47,
      ScreenInfo = 48,
      FishPoolInfo = 59,
      CustomGadgetTreeInfo = 60,
      RoguelikeGadgetInfo = 61,
    }
    private ContentOneofCase contentCase_ = ContentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ContentOneofCase ContentCase {
      get { return contentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearContent() {
      contentCase_ = ContentOneofCase.None;
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SceneGadgetInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SceneGadgetInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TrifleItem, other.TrifleItem)) return false;
      if (!object.Equals(GatherGadget, other.GatherGadget)) return false;
      if (!object.Equals(Worktop, other.Worktop)) return false;
      if (!object.Equals(ClientGadget, other.ClientGadget)) return false;
      if (!object.Equals(Weather, other.Weather)) return false;
      if (!object.Equals(AbilityGadget, other.AbilityGadget)) return false;
      if (!object.Equals(StatueGadget, other.StatueGadget)) return false;
      if (!object.Equals(BossChest, other.BossChest)) return false;
      if (!object.Equals(BlossomChest, other.BlossomChest)) return false;
      if (!object.Equals(MpPlayReward, other.MpPlayReward)) return false;
      if (!object.Equals(GeneralReward, other.GeneralReward)) return false;
      if (!object.Equals(OfferingInfo, other.OfferingInfo)) return false;
      if (!object.Equals(FoundationInfo, other.FoundationInfo)) return false;
      if (!object.Equals(VehicleInfo, other.VehicleInfo)) return false;
      if (!object.Equals(ShellInfo, other.ShellInfo)) return false;
      if (!object.Equals(ScreenInfo, other.ScreenInfo)) return false;
      if (!object.Equals(FishPoolInfo, other.FishPoolInfo)) return false;
      if (!object.Equals(CustomGadgetTreeInfo, other.CustomGadgetTreeInfo)) return false;
      if (!object.Equals(RoguelikeGadgetInfo, other.RoguelikeGadgetInfo)) return false;
      if (GadgetId != other.GadgetId) return false;
      if (GroupId != other.GroupId) return false;
      if (ConfigId != other.ConfigId) return false;
      if (OwnerEntityId != other.OwnerEntityId) return false;
      if (BornType != other.BornType) return false;
      if (GadgetState != other.GadgetState) return false;
      if (GadgetType != other.GadgetType) return false;
      if (IsShowCutscene != other.IsShowCutscene) return false;
      if (AuthorityPeerId != other.AuthorityPeerId) return false;
      if (IsEnableInteract != other.IsEnableInteract) return false;
      if (InteractId != other.InteractId) return false;
      if (MarkFlag != other.MarkFlag) return false;
      if (PropOwnerEntityId != other.PropOwnerEntityId) return false;
      if (!object.Equals(Platform, other.Platform)) return false;
      if(!interactUidList_.Equals(other.interactUidList_)) return false;
      if (DraftId != other.DraftId) return false;
      if (GadgetTalkState != other.GadgetTalkState) return false;
      if (!object.Equals(PlayInfo, other.PlayInfo)) return false;
      if (ContentCase != other.ContentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (contentCase_ == ContentOneofCase.TrifleItem) hash ^= TrifleItem.GetHashCode();
      if (contentCase_ == ContentOneofCase.GatherGadget) hash ^= GatherGadget.GetHashCode();
      if (contentCase_ == ContentOneofCase.Worktop) hash ^= Worktop.GetHashCode();
      if (contentCase_ == ContentOneofCase.ClientGadget) hash ^= ClientGadget.GetHashCode();
      if (contentCase_ == ContentOneofCase.Weather) hash ^= Weather.GetHashCode();
      if (contentCase_ == ContentOneofCase.AbilityGadget) hash ^= AbilityGadget.GetHashCode();
      if (contentCase_ == ContentOneofCase.StatueGadget) hash ^= StatueGadget.GetHashCode();
      if (contentCase_ == ContentOneofCase.BossChest) hash ^= BossChest.GetHashCode();
      if (contentCase_ == ContentOneofCase.BlossomChest) hash ^= BlossomChest.GetHashCode();
      if (contentCase_ == ContentOneofCase.MpPlayReward) hash ^= MpPlayReward.GetHashCode();
      if (contentCase_ == ContentOneofCase.GeneralReward) hash ^= GeneralReward.GetHashCode();
      if (contentCase_ == ContentOneofCase.OfferingInfo) hash ^= OfferingInfo.GetHashCode();
      if (contentCase_ == ContentOneofCase.FoundationInfo) hash ^= FoundationInfo.GetHashCode();
      if (contentCase_ == ContentOneofCase.VehicleInfo) hash ^= VehicleInfo.GetHashCode();
      if (contentCase_ == ContentOneofCase.ShellInfo) hash ^= ShellInfo.GetHashCode();
      if (contentCase_ == ContentOneofCase.ScreenInfo) hash ^= ScreenInfo.GetHashCode();
      if (contentCase_ == ContentOneofCase.FishPoolInfo) hash ^= FishPoolInfo.GetHashCode();
      if (contentCase_ == ContentOneofCase.CustomGadgetTreeInfo) hash ^= CustomGadgetTreeInfo.GetHashCode();
      if (contentCase_ == ContentOneofCase.RoguelikeGadgetInfo) hash ^= RoguelikeGadgetInfo.GetHashCode();
      if (GadgetId != 0) hash ^= GadgetId.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (ConfigId != 0) hash ^= ConfigId.GetHashCode();
      if (OwnerEntityId != 0) hash ^= OwnerEntityId.GetHashCode();
      if (BornType != global::Lemonade.Net.Protocol.GadgetBornType.GadgetBornNone) hash ^= BornType.GetHashCode();
      if (GadgetState != 0) hash ^= GadgetState.GetHashCode();
      if (GadgetType != 0) hash ^= GadgetType.GetHashCode();
      if (IsShowCutscene != false) hash ^= IsShowCutscene.GetHashCode();
      if (AuthorityPeerId != 0) hash ^= AuthorityPeerId.GetHashCode();
      if (IsEnableInteract != false) hash ^= IsEnableInteract.GetHashCode();
      if (InteractId != 0) hash ^= InteractId.GetHashCode();
      if (MarkFlag != 0) hash ^= MarkFlag.GetHashCode();
      if (PropOwnerEntityId != 0) hash ^= PropOwnerEntityId.GetHashCode();
      if (platform_ != null) hash ^= Platform.GetHashCode();
      hash ^= interactUidList_.GetHashCode();
      if (DraftId != 0) hash ^= DraftId.GetHashCode();
      if (GadgetTalkState != 0) hash ^= GadgetTalkState.GetHashCode();
      if (playInfo_ != null) hash ^= PlayInfo.GetHashCode();
      hash ^= (int) contentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (GadgetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GadgetId);
      }
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ConfigId);
      }
      if (OwnerEntityId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OwnerEntityId);
      }
      if (BornType != global::Lemonade.Net.Protocol.GadgetBornType.GadgetBornNone) {
        output.WriteRawTag(40);
        output.WriteEnum((int) BornType);
      }
      if (GadgetState != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(GadgetState);
      }
      if (GadgetType != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(GadgetType);
      }
      if (IsShowCutscene != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsShowCutscene);
      }
      if (AuthorityPeerId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(AuthorityPeerId);
      }
      if (IsEnableInteract != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsEnableInteract);
      }
      if (InteractId != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(InteractId);
      }
      if (contentCase_ == ContentOneofCase.TrifleItem) {
        output.WriteRawTag(98);
        output.WriteMessage(TrifleItem);
      }
      if (contentCase_ == ContentOneofCase.GatherGadget) {
        output.WriteRawTag(106);
        output.WriteMessage(GatherGadget);
      }
      if (contentCase_ == ContentOneofCase.Worktop) {
        output.WriteRawTag(114);
        output.WriteMessage(Worktop);
      }
      if (contentCase_ == ContentOneofCase.ClientGadget) {
        output.WriteRawTag(122);
        output.WriteMessage(ClientGadget);
      }
      if (contentCase_ == ContentOneofCase.Weather) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Weather);
      }
      if (contentCase_ == ContentOneofCase.AbilityGadget) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(AbilityGadget);
      }
      if (contentCase_ == ContentOneofCase.StatueGadget) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(StatueGadget);
      }
      if (contentCase_ == ContentOneofCase.BossChest) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(BossChest);
      }
      if (MarkFlag != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(MarkFlag);
      }
      if (PropOwnerEntityId != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(PropOwnerEntityId);
      }
      if (platform_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Platform);
      }
      interactUidList_.WriteTo(output, _repeated_interactUidList_codec);
      if (DraftId != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(DraftId);
      }
      if (GadgetTalkState != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(GadgetTalkState);
      }
      if (contentCase_ == ContentOneofCase.BlossomChest) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(BlossomChest);
      }
      if (contentCase_ == ContentOneofCase.MpPlayReward) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(MpPlayReward);
      }
      if (contentCase_ == ContentOneofCase.GeneralReward) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(GeneralReward);
      }
      if (contentCase_ == ContentOneofCase.OfferingInfo) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(OfferingInfo);
      }
      if (contentCase_ == ContentOneofCase.FoundationInfo) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(FoundationInfo);
      }
      if (contentCase_ == ContentOneofCase.VehicleInfo) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(VehicleInfo);
      }
      if (contentCase_ == ContentOneofCase.ShellInfo) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(ShellInfo);
      }
      if (contentCase_ == ContentOneofCase.ScreenInfo) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(ScreenInfo);
      }
      if (contentCase_ == ContentOneofCase.FishPoolInfo) {
        output.WriteRawTag(218, 3);
        output.WriteMessage(FishPoolInfo);
      }
      if (contentCase_ == ContentOneofCase.CustomGadgetTreeInfo) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(CustomGadgetTreeInfo);
      }
      if (contentCase_ == ContentOneofCase.RoguelikeGadgetInfo) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(RoguelikeGadgetInfo);
      }
      if (playInfo_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(PlayInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (GadgetId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(GadgetId);
      }
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(GroupId);
      }
      if (ConfigId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ConfigId);
      }
      if (OwnerEntityId != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(OwnerEntityId);
      }
      if (BornType != global::Lemonade.Net.Protocol.GadgetBornType.GadgetBornNone) {
        output.WriteRawTag(40);
        output.WriteEnum((int) BornType);
      }
      if (GadgetState != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(GadgetState);
      }
      if (GadgetType != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(GadgetType);
      }
      if (IsShowCutscene != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsShowCutscene);
      }
      if (AuthorityPeerId != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(AuthorityPeerId);
      }
      if (IsEnableInteract != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsEnableInteract);
      }
      if (InteractId != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(InteractId);
      }
      if (contentCase_ == ContentOneofCase.TrifleItem) {
        output.WriteRawTag(98);
        output.WriteMessage(TrifleItem);
      }
      if (contentCase_ == ContentOneofCase.GatherGadget) {
        output.WriteRawTag(106);
        output.WriteMessage(GatherGadget);
      }
      if (contentCase_ == ContentOneofCase.Worktop) {
        output.WriteRawTag(114);
        output.WriteMessage(Worktop);
      }
      if (contentCase_ == ContentOneofCase.ClientGadget) {
        output.WriteRawTag(122);
        output.WriteMessage(ClientGadget);
      }
      if (contentCase_ == ContentOneofCase.Weather) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Weather);
      }
      if (contentCase_ == ContentOneofCase.AbilityGadget) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(AbilityGadget);
      }
      if (contentCase_ == ContentOneofCase.StatueGadget) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(StatueGadget);
      }
      if (contentCase_ == ContentOneofCase.BossChest) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(BossChest);
      }
      if (MarkFlag != 0) {
        output.WriteRawTag(168, 1);
        output.WriteUInt32(MarkFlag);
      }
      if (PropOwnerEntityId != 0) {
        output.WriteRawTag(176, 1);
        output.WriteUInt32(PropOwnerEntityId);
      }
      if (platform_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(Platform);
      }
      interactUidList_.WriteTo(ref output, _repeated_interactUidList_codec);
      if (DraftId != 0) {
        output.WriteRawTag(200, 1);
        output.WriteUInt32(DraftId);
      }
      if (GadgetTalkState != 0) {
        output.WriteRawTag(208, 1);
        output.WriteUInt32(GadgetTalkState);
      }
      if (contentCase_ == ContentOneofCase.BlossomChest) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(BlossomChest);
      }
      if (contentCase_ == ContentOneofCase.MpPlayReward) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(MpPlayReward);
      }
      if (contentCase_ == ContentOneofCase.GeneralReward) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(GeneralReward);
      }
      if (contentCase_ == ContentOneofCase.OfferingInfo) {
        output.WriteRawTag(226, 2);
        output.WriteMessage(OfferingInfo);
      }
      if (contentCase_ == ContentOneofCase.FoundationInfo) {
        output.WriteRawTag(234, 2);
        output.WriteMessage(FoundationInfo);
      }
      if (contentCase_ == ContentOneofCase.VehicleInfo) {
        output.WriteRawTag(242, 2);
        output.WriteMessage(VehicleInfo);
      }
      if (contentCase_ == ContentOneofCase.ShellInfo) {
        output.WriteRawTag(250, 2);
        output.WriteMessage(ShellInfo);
      }
      if (contentCase_ == ContentOneofCase.ScreenInfo) {
        output.WriteRawTag(130, 3);
        output.WriteMessage(ScreenInfo);
      }
      if (contentCase_ == ContentOneofCase.FishPoolInfo) {
        output.WriteRawTag(218, 3);
        output.WriteMessage(FishPoolInfo);
      }
      if (contentCase_ == ContentOneofCase.CustomGadgetTreeInfo) {
        output.WriteRawTag(226, 3);
        output.WriteMessage(CustomGadgetTreeInfo);
      }
      if (contentCase_ == ContentOneofCase.RoguelikeGadgetInfo) {
        output.WriteRawTag(234, 3);
        output.WriteMessage(RoguelikeGadgetInfo);
      }
      if (playInfo_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(PlayInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (contentCase_ == ContentOneofCase.TrifleItem) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrifleItem);
      }
      if (contentCase_ == ContentOneofCase.GatherGadget) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GatherGadget);
      }
      if (contentCase_ == ContentOneofCase.Worktop) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Worktop);
      }
      if (contentCase_ == ContentOneofCase.ClientGadget) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientGadget);
      }
      if (contentCase_ == ContentOneofCase.Weather) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Weather);
      }
      if (contentCase_ == ContentOneofCase.AbilityGadget) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AbilityGadget);
      }
      if (contentCase_ == ContentOneofCase.StatueGadget) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatueGadget);
      }
      if (contentCase_ == ContentOneofCase.BossChest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BossChest);
      }
      if (contentCase_ == ContentOneofCase.BlossomChest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BlossomChest);
      }
      if (contentCase_ == ContentOneofCase.MpPlayReward) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MpPlayReward);
      }
      if (contentCase_ == ContentOneofCase.GeneralReward) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GeneralReward);
      }
      if (contentCase_ == ContentOneofCase.OfferingInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(OfferingInfo);
      }
      if (contentCase_ == ContentOneofCase.FoundationInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FoundationInfo);
      }
      if (contentCase_ == ContentOneofCase.VehicleInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(VehicleInfo);
      }
      if (contentCase_ == ContentOneofCase.ShellInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ShellInfo);
      }
      if (contentCase_ == ContentOneofCase.ScreenInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ScreenInfo);
      }
      if (contentCase_ == ContentOneofCase.FishPoolInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FishPoolInfo);
      }
      if (contentCase_ == ContentOneofCase.CustomGadgetTreeInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CustomGadgetTreeInfo);
      }
      if (contentCase_ == ContentOneofCase.RoguelikeGadgetInfo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RoguelikeGadgetInfo);
      }
      if (GadgetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GadgetId);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupId);
      }
      if (ConfigId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConfigId);
      }
      if (OwnerEntityId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OwnerEntityId);
      }
      if (BornType != global::Lemonade.Net.Protocol.GadgetBornType.GadgetBornNone) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BornType);
      }
      if (GadgetState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GadgetState);
      }
      if (GadgetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GadgetType);
      }
      if (IsShowCutscene != false) {
        size += 1 + 1;
      }
      if (AuthorityPeerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AuthorityPeerId);
      }
      if (IsEnableInteract != false) {
        size += 1 + 1;
      }
      if (InteractId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InteractId);
      }
      if (MarkFlag != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MarkFlag);
      }
      if (PropOwnerEntityId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(PropOwnerEntityId);
      }
      if (platform_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Platform);
      }
      size += interactUidList_.CalculateSize(_repeated_interactUidList_codec);
      if (DraftId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DraftId);
      }
      if (GadgetTalkState != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(GadgetTalkState);
      }
      if (playInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PlayInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SceneGadgetInfo other) {
      if (other == null) {
        return;
      }
      if (other.GadgetId != 0) {
        GadgetId = other.GadgetId;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.ConfigId != 0) {
        ConfigId = other.ConfigId;
      }
      if (other.OwnerEntityId != 0) {
        OwnerEntityId = other.OwnerEntityId;
      }
      if (other.BornType != global::Lemonade.Net.Protocol.GadgetBornType.GadgetBornNone) {
        BornType = other.BornType;
      }
      if (other.GadgetState != 0) {
        GadgetState = other.GadgetState;
      }
      if (other.GadgetType != 0) {
        GadgetType = other.GadgetType;
      }
      if (other.IsShowCutscene != false) {
        IsShowCutscene = other.IsShowCutscene;
      }
      if (other.AuthorityPeerId != 0) {
        AuthorityPeerId = other.AuthorityPeerId;
      }
      if (other.IsEnableInteract != false) {
        IsEnableInteract = other.IsEnableInteract;
      }
      if (other.InteractId != 0) {
        InteractId = other.InteractId;
      }
      if (other.MarkFlag != 0) {
        MarkFlag = other.MarkFlag;
      }
      if (other.PropOwnerEntityId != 0) {
        PropOwnerEntityId = other.PropOwnerEntityId;
      }
      if (other.platform_ != null) {
        if (platform_ == null) {
          Platform = new global::Lemonade.Net.Protocol.PlatformInfo();
        }
        Platform.MergeFrom(other.Platform);
      }
      interactUidList_.Add(other.interactUidList_);
      if (other.DraftId != 0) {
        DraftId = other.DraftId;
      }
      if (other.GadgetTalkState != 0) {
        GadgetTalkState = other.GadgetTalkState;
      }
      if (other.playInfo_ != null) {
        if (playInfo_ == null) {
          PlayInfo = new global::Lemonade.Net.Protocol.GadgetPlayInfo();
        }
        PlayInfo.MergeFrom(other.PlayInfo);
      }
      switch (other.ContentCase) {
        case ContentOneofCase.TrifleItem:
          if (TrifleItem == null) {
            TrifleItem = new global::Lemonade.Net.Protocol.Item();
          }
          TrifleItem.MergeFrom(other.TrifleItem);
          break;
        case ContentOneofCase.GatherGadget:
          if (GatherGadget == null) {
            GatherGadget = new global::Lemonade.Net.Protocol.GatherGadgetInfo();
          }
          GatherGadget.MergeFrom(other.GatherGadget);
          break;
        case ContentOneofCase.Worktop:
          if (Worktop == null) {
            Worktop = new global::Lemonade.Net.Protocol.WorktopInfo();
          }
          Worktop.MergeFrom(other.Worktop);
          break;
        case ContentOneofCase.ClientGadget:
          if (ClientGadget == null) {
            ClientGadget = new global::Lemonade.Net.Protocol.ClientGadgetInfo();
          }
          ClientGadget.MergeFrom(other.ClientGadget);
          break;
        case ContentOneofCase.Weather:
          if (Weather == null) {
            Weather = new global::Lemonade.Net.Protocol.WeatherInfo();
          }
          Weather.MergeFrom(other.Weather);
          break;
        case ContentOneofCase.AbilityGadget:
          if (AbilityGadget == null) {
            AbilityGadget = new global::Lemonade.Net.Protocol.AbilityGadgetInfo();
          }
          AbilityGadget.MergeFrom(other.AbilityGadget);
          break;
        case ContentOneofCase.StatueGadget:
          if (StatueGadget == null) {
            StatueGadget = new global::Lemonade.Net.Protocol.StatueGadgetInfo();
          }
          StatueGadget.MergeFrom(other.StatueGadget);
          break;
        case ContentOneofCase.BossChest:
          if (BossChest == null) {
            BossChest = new global::Lemonade.Net.Protocol.BossChestInfo();
          }
          BossChest.MergeFrom(other.BossChest);
          break;
        case ContentOneofCase.BlossomChest:
          if (BlossomChest == null) {
            BlossomChest = new global::Lemonade.Net.Protocol.BlossomChestInfo();
          }
          BlossomChest.MergeFrom(other.BlossomChest);
          break;
        case ContentOneofCase.MpPlayReward:
          if (MpPlayReward == null) {
            MpPlayReward = new global::Lemonade.Net.Protocol.MpPlayRewardInfo();
          }
          MpPlayReward.MergeFrom(other.MpPlayReward);
          break;
        case ContentOneofCase.GeneralReward:
          if (GeneralReward == null) {
            GeneralReward = new global::Lemonade.Net.Protocol.GadgetGeneralRewardInfo();
          }
          GeneralReward.MergeFrom(other.GeneralReward);
          break;
        case ContentOneofCase.OfferingInfo:
          if (OfferingInfo == null) {
            OfferingInfo = new global::Lemonade.Net.Protocol.OfferingInfo();
          }
          OfferingInfo.MergeFrom(other.OfferingInfo);
          break;
        case ContentOneofCase.FoundationInfo:
          if (FoundationInfo == null) {
            FoundationInfo = new global::Lemonade.Net.Protocol.FoundationInfo();
          }
          FoundationInfo.MergeFrom(other.FoundationInfo);
          break;
        case ContentOneofCase.VehicleInfo:
          if (VehicleInfo == null) {
            VehicleInfo = new global::Lemonade.Net.Protocol.VehicleInfo();
          }
          VehicleInfo.MergeFrom(other.VehicleInfo);
          break;
        case ContentOneofCase.ShellInfo:
          if (ShellInfo == null) {
            ShellInfo = new global::Lemonade.Net.Protocol.EchoShellInfo();
          }
          ShellInfo.MergeFrom(other.ShellInfo);
          break;
        case ContentOneofCase.ScreenInfo:
          if (ScreenInfo == null) {
            ScreenInfo = new global::Lemonade.Net.Protocol.ScreenInfo();
          }
          ScreenInfo.MergeFrom(other.ScreenInfo);
          break;
        case ContentOneofCase.FishPoolInfo:
          if (FishPoolInfo == null) {
            FishPoolInfo = new global::Lemonade.Net.Protocol.FishPoolInfo();
          }
          FishPoolInfo.MergeFrom(other.FishPoolInfo);
          break;
        case ContentOneofCase.CustomGadgetTreeInfo:
          if (CustomGadgetTreeInfo == null) {
            CustomGadgetTreeInfo = new global::Lemonade.Net.Protocol.CustomGadgetTreeInfo();
          }
          CustomGadgetTreeInfo.MergeFrom(other.CustomGadgetTreeInfo);
          break;
        case ContentOneofCase.RoguelikeGadgetInfo:
          if (RoguelikeGadgetInfo == null) {
            RoguelikeGadgetInfo = new global::Lemonade.Net.Protocol.RoguelikeGadgetInfo();
          }
          RoguelikeGadgetInfo.MergeFrom(other.RoguelikeGadgetInfo);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            GadgetId = input.ReadUInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 24: {
            ConfigId = input.ReadUInt32();
            break;
          }
          case 32: {
            OwnerEntityId = input.ReadUInt32();
            break;
          }
          case 40: {
            BornType = (global::Lemonade.Net.Protocol.GadgetBornType) input.ReadEnum();
            break;
          }
          case 48: {
            GadgetState = input.ReadUInt32();
            break;
          }
          case 56: {
            GadgetType = input.ReadUInt32();
            break;
          }
          case 64: {
            IsShowCutscene = input.ReadBool();
            break;
          }
          case 72: {
            AuthorityPeerId = input.ReadUInt32();
            break;
          }
          case 80: {
            IsEnableInteract = input.ReadBool();
            break;
          }
          case 88: {
            InteractId = input.ReadUInt32();
            break;
          }
          case 98: {
            global::Lemonade.Net.Protocol.Item subBuilder = new global::Lemonade.Net.Protocol.Item();
            if (contentCase_ == ContentOneofCase.TrifleItem) {
              subBuilder.MergeFrom(TrifleItem);
            }
            input.ReadMessage(subBuilder);
            TrifleItem = subBuilder;
            break;
          }
          case 106: {
            global::Lemonade.Net.Protocol.GatherGadgetInfo subBuilder = new global::Lemonade.Net.Protocol.GatherGadgetInfo();
            if (contentCase_ == ContentOneofCase.GatherGadget) {
              subBuilder.MergeFrom(GatherGadget);
            }
            input.ReadMessage(subBuilder);
            GatherGadget = subBuilder;
            break;
          }
          case 114: {
            global::Lemonade.Net.Protocol.WorktopInfo subBuilder = new global::Lemonade.Net.Protocol.WorktopInfo();
            if (contentCase_ == ContentOneofCase.Worktop) {
              subBuilder.MergeFrom(Worktop);
            }
            input.ReadMessage(subBuilder);
            Worktop = subBuilder;
            break;
          }
          case 122: {
            global::Lemonade.Net.Protocol.ClientGadgetInfo subBuilder = new global::Lemonade.Net.Protocol.ClientGadgetInfo();
            if (contentCase_ == ContentOneofCase.ClientGadget) {
              subBuilder.MergeFrom(ClientGadget);
            }
            input.ReadMessage(subBuilder);
            ClientGadget = subBuilder;
            break;
          }
          case 138: {
            global::Lemonade.Net.Protocol.WeatherInfo subBuilder = new global::Lemonade.Net.Protocol.WeatherInfo();
            if (contentCase_ == ContentOneofCase.Weather) {
              subBuilder.MergeFrom(Weather);
            }
            input.ReadMessage(subBuilder);
            Weather = subBuilder;
            break;
          }
          case 146: {
            global::Lemonade.Net.Protocol.AbilityGadgetInfo subBuilder = new global::Lemonade.Net.Protocol.AbilityGadgetInfo();
            if (contentCase_ == ContentOneofCase.AbilityGadget) {
              subBuilder.MergeFrom(AbilityGadget);
            }
            input.ReadMessage(subBuilder);
            AbilityGadget = subBuilder;
            break;
          }
          case 154: {
            global::Lemonade.Net.Protocol.StatueGadgetInfo subBuilder = new global::Lemonade.Net.Protocol.StatueGadgetInfo();
            if (contentCase_ == ContentOneofCase.StatueGadget) {
              subBuilder.MergeFrom(StatueGadget);
            }
            input.ReadMessage(subBuilder);
            StatueGadget = subBuilder;
            break;
          }
          case 162: {
            global::Lemonade.Net.Protocol.BossChestInfo subBuilder = new global::Lemonade.Net.Protocol.BossChestInfo();
            if (contentCase_ == ContentOneofCase.BossChest) {
              subBuilder.MergeFrom(BossChest);
            }
            input.ReadMessage(subBuilder);
            BossChest = subBuilder;
            break;
          }
          case 168: {
            MarkFlag = input.ReadUInt32();
            break;
          }
          case 176: {
            PropOwnerEntityId = input.ReadUInt32();
            break;
          }
          case 186: {
            if (platform_ == null) {
              Platform = new global::Lemonade.Net.Protocol.PlatformInfo();
            }
            input.ReadMessage(Platform);
            break;
          }
          case 194:
          case 192: {
            interactUidList_.AddEntriesFrom(input, _repeated_interactUidList_codec);
            break;
          }
          case 200: {
            DraftId = input.ReadUInt32();
            break;
          }
          case 208: {
            GadgetTalkState = input.ReadUInt32();
            break;
          }
          case 330: {
            global::Lemonade.Net.Protocol.BlossomChestInfo subBuilder = new global::Lemonade.Net.Protocol.BlossomChestInfo();
            if (contentCase_ == ContentOneofCase.BlossomChest) {
              subBuilder.MergeFrom(BlossomChest);
            }
            input.ReadMessage(subBuilder);
            BlossomChest = subBuilder;
            break;
          }
          case 338: {
            global::Lemonade.Net.Protocol.MpPlayRewardInfo subBuilder = new global::Lemonade.Net.Protocol.MpPlayRewardInfo();
            if (contentCase_ == ContentOneofCase.MpPlayReward) {
              subBuilder.MergeFrom(MpPlayReward);
            }
            input.ReadMessage(subBuilder);
            MpPlayReward = subBuilder;
            break;
          }
          case 346: {
            global::Lemonade.Net.Protocol.GadgetGeneralRewardInfo subBuilder = new global::Lemonade.Net.Protocol.GadgetGeneralRewardInfo();
            if (contentCase_ == ContentOneofCase.GeneralReward) {
              subBuilder.MergeFrom(GeneralReward);
            }
            input.ReadMessage(subBuilder);
            GeneralReward = subBuilder;
            break;
          }
          case 354: {
            global::Lemonade.Net.Protocol.OfferingInfo subBuilder = new global::Lemonade.Net.Protocol.OfferingInfo();
            if (contentCase_ == ContentOneofCase.OfferingInfo) {
              subBuilder.MergeFrom(OfferingInfo);
            }
            input.ReadMessage(subBuilder);
            OfferingInfo = subBuilder;
            break;
          }
          case 362: {
            global::Lemonade.Net.Protocol.FoundationInfo subBuilder = new global::Lemonade.Net.Protocol.FoundationInfo();
            if (contentCase_ == ContentOneofCase.FoundationInfo) {
              subBuilder.MergeFrom(FoundationInfo);
            }
            input.ReadMessage(subBuilder);
            FoundationInfo = subBuilder;
            break;
          }
          case 370: {
            global::Lemonade.Net.Protocol.VehicleInfo subBuilder = new global::Lemonade.Net.Protocol.VehicleInfo();
            if (contentCase_ == ContentOneofCase.VehicleInfo) {
              subBuilder.MergeFrom(VehicleInfo);
            }
            input.ReadMessage(subBuilder);
            VehicleInfo = subBuilder;
            break;
          }
          case 378: {
            global::Lemonade.Net.Protocol.EchoShellInfo subBuilder = new global::Lemonade.Net.Protocol.EchoShellInfo();
            if (contentCase_ == ContentOneofCase.ShellInfo) {
              subBuilder.MergeFrom(ShellInfo);
            }
            input.ReadMessage(subBuilder);
            ShellInfo = subBuilder;
            break;
          }
          case 386: {
            global::Lemonade.Net.Protocol.ScreenInfo subBuilder = new global::Lemonade.Net.Protocol.ScreenInfo();
            if (contentCase_ == ContentOneofCase.ScreenInfo) {
              subBuilder.MergeFrom(ScreenInfo);
            }
            input.ReadMessage(subBuilder);
            ScreenInfo = subBuilder;
            break;
          }
          case 474: {
            global::Lemonade.Net.Protocol.FishPoolInfo subBuilder = new global::Lemonade.Net.Protocol.FishPoolInfo();
            if (contentCase_ == ContentOneofCase.FishPoolInfo) {
              subBuilder.MergeFrom(FishPoolInfo);
            }
            input.ReadMessage(subBuilder);
            FishPoolInfo = subBuilder;
            break;
          }
          case 482: {
            global::Lemonade.Net.Protocol.CustomGadgetTreeInfo subBuilder = new global::Lemonade.Net.Protocol.CustomGadgetTreeInfo();
            if (contentCase_ == ContentOneofCase.CustomGadgetTreeInfo) {
              subBuilder.MergeFrom(CustomGadgetTreeInfo);
            }
            input.ReadMessage(subBuilder);
            CustomGadgetTreeInfo = subBuilder;
            break;
          }
          case 490: {
            global::Lemonade.Net.Protocol.RoguelikeGadgetInfo subBuilder = new global::Lemonade.Net.Protocol.RoguelikeGadgetInfo();
            if (contentCase_ == ContentOneofCase.RoguelikeGadgetInfo) {
              subBuilder.MergeFrom(RoguelikeGadgetInfo);
            }
            input.ReadMessage(subBuilder);
            RoguelikeGadgetInfo = subBuilder;
            break;
          }
          case 802: {
            if (playInfo_ == null) {
              PlayInfo = new global::Lemonade.Net.Protocol.GadgetPlayInfo();
            }
            input.ReadMessage(PlayInfo);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            GadgetId = input.ReadUInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadUInt32();
            break;
          }
          case 24: {
            ConfigId = input.ReadUInt32();
            break;
          }
          case 32: {
            OwnerEntityId = input.ReadUInt32();
            break;
          }
          case 40: {
            BornType = (global::Lemonade.Net.Protocol.GadgetBornType) input.ReadEnum();
            break;
          }
          case 48: {
            GadgetState = input.ReadUInt32();
            break;
          }
          case 56: {
            GadgetType = input.ReadUInt32();
            break;
          }
          case 64: {
            IsShowCutscene = input.ReadBool();
            break;
          }
          case 72: {
            AuthorityPeerId = input.ReadUInt32();
            break;
          }
          case 80: {
            IsEnableInteract = input.ReadBool();
            break;
          }
          case 88: {
            InteractId = input.ReadUInt32();
            break;
          }
          case 98: {
            global::Lemonade.Net.Protocol.Item subBuilder = new global::Lemonade.Net.Protocol.Item();
            if (contentCase_ == ContentOneofCase.TrifleItem) {
              subBuilder.MergeFrom(TrifleItem);
            }
            input.ReadMessage(subBuilder);
            TrifleItem = subBuilder;
            break;
          }
          case 106: {
            global::Lemonade.Net.Protocol.GatherGadgetInfo subBuilder = new global::Lemonade.Net.Protocol.GatherGadgetInfo();
            if (contentCase_ == ContentOneofCase.GatherGadget) {
              subBuilder.MergeFrom(GatherGadget);
            }
            input.ReadMessage(subBuilder);
            GatherGadget = subBuilder;
            break;
          }
          case 114: {
            global::Lemonade.Net.Protocol.WorktopInfo subBuilder = new global::Lemonade.Net.Protocol.WorktopInfo();
            if (contentCase_ == ContentOneofCase.Worktop) {
              subBuilder.MergeFrom(Worktop);
            }
            input.ReadMessage(subBuilder);
            Worktop = subBuilder;
            break;
          }
          case 122: {
            global::Lemonade.Net.Protocol.ClientGadgetInfo subBuilder = new global::Lemonade.Net.Protocol.ClientGadgetInfo();
            if (contentCase_ == ContentOneofCase.ClientGadget) {
              subBuilder.MergeFrom(ClientGadget);
            }
            input.ReadMessage(subBuilder);
            ClientGadget = subBuilder;
            break;
          }
          case 138: {
            global::Lemonade.Net.Protocol.WeatherInfo subBuilder = new global::Lemonade.Net.Protocol.WeatherInfo();
            if (contentCase_ == ContentOneofCase.Weather) {
              subBuilder.MergeFrom(Weather);
            }
            input.ReadMessage(subBuilder);
            Weather = subBuilder;
            break;
          }
          case 146: {
            global::Lemonade.Net.Protocol.AbilityGadgetInfo subBuilder = new global::Lemonade.Net.Protocol.AbilityGadgetInfo();
            if (contentCase_ == ContentOneofCase.AbilityGadget) {
              subBuilder.MergeFrom(AbilityGadget);
            }
            input.ReadMessage(subBuilder);
            AbilityGadget = subBuilder;
            break;
          }
          case 154: {
            global::Lemonade.Net.Protocol.StatueGadgetInfo subBuilder = new global::Lemonade.Net.Protocol.StatueGadgetInfo();
            if (contentCase_ == ContentOneofCase.StatueGadget) {
              subBuilder.MergeFrom(StatueGadget);
            }
            input.ReadMessage(subBuilder);
            StatueGadget = subBuilder;
            break;
          }
          case 162: {
            global::Lemonade.Net.Protocol.BossChestInfo subBuilder = new global::Lemonade.Net.Protocol.BossChestInfo();
            if (contentCase_ == ContentOneofCase.BossChest) {
              subBuilder.MergeFrom(BossChest);
            }
            input.ReadMessage(subBuilder);
            BossChest = subBuilder;
            break;
          }
          case 168: {
            MarkFlag = input.ReadUInt32();
            break;
          }
          case 176: {
            PropOwnerEntityId = input.ReadUInt32();
            break;
          }
          case 186: {
            if (platform_ == null) {
              Platform = new global::Lemonade.Net.Protocol.PlatformInfo();
            }
            input.ReadMessage(Platform);
            break;
          }
          case 194:
          case 192: {
            interactUidList_.AddEntriesFrom(ref input, _repeated_interactUidList_codec);
            break;
          }
          case 200: {
            DraftId = input.ReadUInt32();
            break;
          }
          case 208: {
            GadgetTalkState = input.ReadUInt32();
            break;
          }
          case 330: {
            global::Lemonade.Net.Protocol.BlossomChestInfo subBuilder = new global::Lemonade.Net.Protocol.BlossomChestInfo();
            if (contentCase_ == ContentOneofCase.BlossomChest) {
              subBuilder.MergeFrom(BlossomChest);
            }
            input.ReadMessage(subBuilder);
            BlossomChest = subBuilder;
            break;
          }
          case 338: {
            global::Lemonade.Net.Protocol.MpPlayRewardInfo subBuilder = new global::Lemonade.Net.Protocol.MpPlayRewardInfo();
            if (contentCase_ == ContentOneofCase.MpPlayReward) {
              subBuilder.MergeFrom(MpPlayReward);
            }
            input.ReadMessage(subBuilder);
            MpPlayReward = subBuilder;
            break;
          }
          case 346: {
            global::Lemonade.Net.Protocol.GadgetGeneralRewardInfo subBuilder = new global::Lemonade.Net.Protocol.GadgetGeneralRewardInfo();
            if (contentCase_ == ContentOneofCase.GeneralReward) {
              subBuilder.MergeFrom(GeneralReward);
            }
            input.ReadMessage(subBuilder);
            GeneralReward = subBuilder;
            break;
          }
          case 354: {
            global::Lemonade.Net.Protocol.OfferingInfo subBuilder = new global::Lemonade.Net.Protocol.OfferingInfo();
            if (contentCase_ == ContentOneofCase.OfferingInfo) {
              subBuilder.MergeFrom(OfferingInfo);
            }
            input.ReadMessage(subBuilder);
            OfferingInfo = subBuilder;
            break;
          }
          case 362: {
            global::Lemonade.Net.Protocol.FoundationInfo subBuilder = new global::Lemonade.Net.Protocol.FoundationInfo();
            if (contentCase_ == ContentOneofCase.FoundationInfo) {
              subBuilder.MergeFrom(FoundationInfo);
            }
            input.ReadMessage(subBuilder);
            FoundationInfo = subBuilder;
            break;
          }
          case 370: {
            global::Lemonade.Net.Protocol.VehicleInfo subBuilder = new global::Lemonade.Net.Protocol.VehicleInfo();
            if (contentCase_ == ContentOneofCase.VehicleInfo) {
              subBuilder.MergeFrom(VehicleInfo);
            }
            input.ReadMessage(subBuilder);
            VehicleInfo = subBuilder;
            break;
          }
          case 378: {
            global::Lemonade.Net.Protocol.EchoShellInfo subBuilder = new global::Lemonade.Net.Protocol.EchoShellInfo();
            if (contentCase_ == ContentOneofCase.ShellInfo) {
              subBuilder.MergeFrom(ShellInfo);
            }
            input.ReadMessage(subBuilder);
            ShellInfo = subBuilder;
            break;
          }
          case 386: {
            global::Lemonade.Net.Protocol.ScreenInfo subBuilder = new global::Lemonade.Net.Protocol.ScreenInfo();
            if (contentCase_ == ContentOneofCase.ScreenInfo) {
              subBuilder.MergeFrom(ScreenInfo);
            }
            input.ReadMessage(subBuilder);
            ScreenInfo = subBuilder;
            break;
          }
          case 474: {
            global::Lemonade.Net.Protocol.FishPoolInfo subBuilder = new global::Lemonade.Net.Protocol.FishPoolInfo();
            if (contentCase_ == ContentOneofCase.FishPoolInfo) {
              subBuilder.MergeFrom(FishPoolInfo);
            }
            input.ReadMessage(subBuilder);
            FishPoolInfo = subBuilder;
            break;
          }
          case 482: {
            global::Lemonade.Net.Protocol.CustomGadgetTreeInfo subBuilder = new global::Lemonade.Net.Protocol.CustomGadgetTreeInfo();
            if (contentCase_ == ContentOneofCase.CustomGadgetTreeInfo) {
              subBuilder.MergeFrom(CustomGadgetTreeInfo);
            }
            input.ReadMessage(subBuilder);
            CustomGadgetTreeInfo = subBuilder;
            break;
          }
          case 490: {
            global::Lemonade.Net.Protocol.RoguelikeGadgetInfo subBuilder = new global::Lemonade.Net.Protocol.RoguelikeGadgetInfo();
            if (contentCase_ == ContentOneofCase.RoguelikeGadgetInfo) {
              subBuilder.MergeFrom(RoguelikeGadgetInfo);
            }
            input.ReadMessage(subBuilder);
            RoguelikeGadgetInfo = subBuilder;
            break;
          }
          case 802: {
            if (playInfo_ == null) {
              PlayInfo = new global::Lemonade.Net.Protocol.GadgetPlayInfo();
            }
            input.ReadMessage(PlayInfo);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
